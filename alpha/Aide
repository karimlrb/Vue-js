// @ c'est le raccourci des events v-on:click par exemple; : c'est le raccourci de
// v-bind

// Si on fait un v-if et un v-else les éléments doivent être à la suite
// ------------------------------------------------------------------------------------------------------------------------------------------
//       <p v-if="num === 1">La valeur est 1</p>
//       <p v-else-if="num === 2">La valeur est 2</p>
//       <p v-else-if="num === 3">La valeur est 3</p>
//       <p v-else>La valeur n'est pas 1 ou 2 ou 3</p>

//        <script>
//       new Vue({
//         el: "#mon-app",
//         data: {
//           num: 0,
//           toggleBox: true,
//         },
//       });
//     </script>
// ------------------------------------------------------------------------------------------------------------------------------------------
// Pour avoir un if sur un groupe on utilise template
// Le template n'est pas dans le DOM
//    <template v-if="toggleBox">
//         <p>Lorem ipsum dolor sit.</p>
//         <p>Lorem ipsum dolor sit.</p>
//         <p>Lorem ipsum dolor sit.</p>
//         <p>Lorem ipsum dolor sit.</p>
//         <p>Lorem ipsum dolor sit.</p>
//       </template>
// ------------------------------------------------------------------------------------------------------------------------------------------
// Boucle for

// <ul>
// <li v-for="number in tableau">{{ number }}</li>
// </ul>
//   new Vue({
//     el: "#mon-app",
//     data: {
//       tableau: [1, 2, 3, 4, 5],
//       toggleBox: true,
//     },
//   });
// ------------------------------------------------------------------------------------------------------------------------------------------
// index de tableaux
{
  /* <ul>
<li v-for="(fruit, index) in tableauFruits">{{index}} : {{ fruit }}</li>
</ul>

new Vue({
    el: "#mon-app",
    data: {
      tableauFruits: ["Fraise", "Pomme", "Poire"],
      toggleBox: true,
    },
  }); */
  // }
  // ------------------------------------------------------------------------------------------------------------------------------------------
//  Same pour les objets
  /* <ul>
<li v-for="(val,props) in objChat">{{props}} : {{ val }}</li>
</ul>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
<script>
new Vue({
el: "#mon-app",
data: {
  objChat: {
    race: "Persan",
    age: 3,
    poids: "6kg",
  },
  toggleBox: true,
},
}); */
// }
// ------------------------------------------------------------------------------------------------------------------------------------------
// Iterer dans un tableaux d'objets avec une double boucle for

// {/* <ul>
// <li v-for="obj in objChat">
//   <div v-for="(val,props) in obj">{{ props }} : {{ val}}</div>
// </li>
// </ul>
// </div>
// <script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
// <script>
// new Vue({
// el: "#mon-app",
// data: {
//   objChat: [
//     { race: "Persan", age: 3, poids: "6kg" },
//     { race: "Persan", age: 3, poids: "6kg" },
//     { race: "Persan", age: 3, poids: "6kg" },
//     { race: "Persan", age: 3, poids: "6kg" },
//   ],
//   toggleBox: true,
// },
// // }); */}
// race : Persan
// age : 3
// poids : 6kg
// race : Persan
// age : 3
// poids : 6kg
// race : Persan
// age : 3
// poids : 6kg
// race : Persan
// age : 3
// poids : 6kg
// ------------------------------------------------------------------------------------------------------------------------------------------
// Modifier instance1 depuis instance 2
{/* <div id="mon-app2">
<h1>{{txt}}</h1>
<button v-on:click="func1">Modifier Instance 1</button>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
<script>
const instance1 = new Vue({
  el: "#mon-app1",
  data: {
    txt: "Hello APP1",
  },
});
const instance2 = new Vue({
  el: "#mon-app2",
  data: {
    txt: "Hello APP2",
  },
  methods: {
    func1: function () {
      instance1.txt = "Je t'ai modifiée";
    },
  },
});} */

// ------------------------------------------------------------------------------------------------------------------------------------------
// INSTANCE MONTER AVANT DE L'AJOUTER
// On crée l'instance plus haut
// On monte l'instance avec .$mount
//l'ajoute ou on veut avec du js/ .$el est l'instance qu'on vient de crée
// instance1.$mount();
// document.getElementById("mon-app1").appendChild(instance1.$el);

// const instance2 = new Vue({
// el: "#mon-app2",
// data: {
//     txt: "Hello APP2",
// },
// methods: {
//     func1: function () {
//     instance1.txt = "Je t'ai modifiée";
//     },
// },
// });
// ------------------------------------------------------------------------------------------------------------------------------------------
// Vue COMPONENT

// On peut utiliser des méthods et des données mais dans le data d'une vue
// Mais dans data on retourne une function qui retourne un objet qui seront nos donner
// Dans une instance data est unn objet directement

{/* <div id="mon-app1">
<mon-premier-composant></mon-premier-composant>
<mon-premier-composant></mon-premier-composant>
</div>

<div id="mon-app2">
<h1>{{txt}}</h1>
<button v-on:click="func1">Modifier Instance 1</button>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
<script>
Vue.component("mon-premier-composant", {
  template:
    '<p>Mon premier composant {{nom}} <button v-on:click="changementNom">Changement</button> </p>',
  data: function () {
    return {
      nom: "John Wick",
    };
  },
  methods: {
    changementNom: function () {
      this.nom = "Jack Bauer";
    },
  },
});

Mon premier composant Jack Bauer Changement

Mon premier composant John Wick Changement */}