// ----------------------------------------------------------------------
// Etape pour créé un composant Modale Coorection
// |
// 1. Crée le Modale.vue dans les fichiers
// 2. Rajouter template et créer, script et style dans le modale
// 2.1    <div class="bloc-modale" v-if="revele">

            <div class="overlay"></div>

            <div class="modale card">
                <div class="btn-modale btn btn-danger">X</div>
                <h2>Le contenue de la modale</h2>
            </div>

        </div>
// 3. Créer le export et les props    export default {
        name:'Modale',
        props:['revele', 'togglModale']
    }
// 4. Le style .bloc-modale {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}
// 5. Importer le modale dans le parent   import Modale from './Modale.vue'
// 6. Le rajouter dans le components parent   components: {
            'texte1':Texte1,
            'texte2':Texte2,
            'modale':Modale
        },
// 7. On l'affiche dans le parent <modale></modale>
// 8. Le css de la modale dans le style .overlay{
    background: rgba(0,0,0,0.5);
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}
.modale {
    background: #f1f1f1;
    color: #333;
    padding: 50px;
    position: fixed;
    bottom: 10%;
}
.btn-modale{
    position: absolute;
    top: 10px;
    right: 10px;
}
9. Créer revele dans les data du parent   revele:false,
10. Dans le parent on bind pour pouvoir l'utiliser dans l'enfant
    <modale v-bind:revele="revele"></modale>
11. Dans l'enfant -> <div class="bloc-modale" v-if="revele">
POur l'activer que so revele = true (de base il est false)
12. Créer notre button dans le parent et lui ajouter v-on
 <div v-on:click="togglModale" class="btn btn-success">Ouvrir la modale</div>
 13. Créer la méthode Toggle modale dans methods

     On recupere revele et return l'inverse au click
     Mais à ce stade au click on ne peut plus click nul part
     toggleModale:function(){
             this.revele = !this.revele
         }
14. On veut fermer la modale au CLICK sur OVERLAY et BTN DANGER X
Pour ca on doit faire passer la methode dans  MODALE.VUE 
donc on fait : <modale v-bind:revele="revele" v-bind:toggleModale="toggleModale"></modale>
C'est pareille que pour le revele (10.)
15. Il suffit d'ajouter la method toggleModale grace a v-on:click aux BUTTON & OVERLAY
 <div v-on:click="toggleModale" class="overlay"></div>

     <div v-on:click="toggleModale" class="btn-modale btn btn-danger">x</div>

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
||  Etape pour utiliser une api avec axios
1. installer axios -> npm install axios
2. Aller dans export default{} et utiliser grace a mounted
Ici le get va chercher les données de l'API "cat"
  mounted(){
            axios
            .get('https://api.thecatapi.com/v1/images/search') 
        }
Ensuite on utilise then 
             mounted(){
            axios
            .get('https://api.thecatapi.com/v1/images/search')
            .then(reponse => {
                console.log(reponse);
            }) 
        }
On a envie de mettre dans des données ce que l'on recupère
 urlImg: null,
Ensuite on revient à mounted au lieu du log on recupere l'url dans data index 0 -> url 
  mounted(){
            axios
            .get('https://api.thecatapi.com/v1/images/search')
            .then(reponse => {
               this.urlImg = reponse.data[0].url;
            }) 
        }
3. Attention quand on lie les données à la balise <img> ne pas se tromper
On lie la src de l'image à l'url récupérée
<img v-bind:src="urlImg" >
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

||| Formulaire, comment relier un input et un textarea grace à v-model
----------------------------------------------------------------
On a notre form 
 <div class="form-group">
    <label for="prenom">Votre prénom</label>
    <input v-model="prenom" type="text" id="prenom" class="form-control">
</div>

<div class="form-group">
    <label for="txt">Votre Texte</label>
    <textarea v-model="monTxt" id="txt" class="form-control" ></textarea>
</div>
1. On créer nos data
 prenom:"",
 monTxt:""

2. Les relier avec nos input et textarea grace a v-model 

<input v-model="prenom" type="text" id="prenom" class="form-control">

<textarea v-model="monTxt" id="txt" class="form-control" ></textarea>

3. Les afficher où on veut
   <div class="card p-3">
        <p>Pénom : {{prenom}} </p>
        <p>Texte : {{monTxt}}  </p>
    </div>
4. On créer un objet formData pour être plus propre
     formData:{
        prenom:"",
        monTxt:""
    }
Par contre maintenant on remplace prenom par formData.prenom etc PARTOUT
    <div class="form-group">
----------><label for="prenom">Votre prénom</label>
        <input v-model="formData.prenom" type="text" id="prenom" class="form-control">
    </div>

    <div class="form-group">
        <label for="txt">Votre Texte</label>
----------><textarea v-model="formData.monTxt" id="txt" class="form-control" ></textarea>
    </div>

    <h2>Résultats</h2>

    <div class="card p-3">
----------><p>Pénom : {{formData.prenom}} </p>
----------><p>Texte : {{formData.monTxt}}  </p>
    </div>
5. v-model.lazy affiche les données qu'on écrit uniquement après un click
6. v-model.number change le type de ce qu'on écrit(string) en number
7. Si on veut conserver la presentation dans le textarea
<p style="white-space: pre">Texte : {{formData.monTxt}}  </p>

|||| Formulaire, checkbox
----------------------------------------------------------------
Utiliser les checkbox
1. On crée les checkbox (3)
<div class="form-check">
    <input
        value="mangue"
        id="mangue"
        type="checkbox"
        class="form-check-input"
    />
    <label for="mangue">mangue</label>
    </div>
2. On les rajoutes dans formData
  formData: {
    prenom: "",
    monTxt: "",
    checkFruits:[]
},
3. On les rajoutes dans les inputs avec v-model grace a value
  <input v-model="formData.checkfruits".....>
4.A chaque click grace a value on rajoute les fruits dans le tableau vide checkfruits[]
On utilise un v-for
On créer un ul avec des li
  <p>Résultats checkbox</p>
        <ul>
          <li  v-for="(fruit) in formData.checkFruits">
            {{ fruit }}
          </li>
        </ul>
Ici erreur car il manque v-bind:key
   <li v-bind:key="index" v-for="(fruit, index) in formData.checkFruits">
----------------------------------------------------------------
Utiliser les checkbox
1.
<select>
    <option></option>
</select>
1.1
 <select v-model="formData.select">
Le v-model

2.
select: "",
listePays: ["Russie", "Japon", "Canada", "Mexique"],
3.
<option v-bind:key="index" v-for="(pays, index) in formData.listePays">
4.
Ne pas oublier le v-model
 <select v-model="formData.select"> Oublie pas !!!!!!!!
5.
<p>Choix du Select : {{ formData.select }}</p>